@*
    Copyright 2002-2011 Corey Trager
    Copyright 2017-2019 Ivan Grek

    Distributed under the terms of the GNU General Public License
*@

@using System.Data
@using BugTracker.Web.Models
@model BugTracker.Web.Models.SortableTableModel

@{
    var page = (PageModel) ViewBag.Page;

    ViewBag.Title = page.Title;
}

@section Styles {
    <link href="~/Content/custom/btnet_custom.css" rel="stylesheet"/>
}

@section Scripts {
    <script type="text/javascript" src=" ~/Scripts/sortable.js"></script>
}

@section BodyHeader {
    @Html.Partial("_MainMenu", page)
}

<div class="main">

    <div class="lbl" style="width: 600px;">
        The query "demo use of css classes" has as its first column a CSS class name that is
        composed of the priority's CSS class name concatenated with the status's CSS
        class name. The SQL looks like this:
    </div>
    <p></p>
    <div style="font-family: courier; font-weight: bold;">
        select <span style="color: red;">isnull(pr_style + st_style,'datad')</span>, bg_id [id], bg_short_desc [desc], .... etc
    </div>
    <p></p>
    <div class="lbl" style="width: 600px;">
        Note that in the sql, where there isn't both a priority CSS class and a status CSS class
        available, the default CSS class name of "datad" is used. The following list lets you see
        how all the different priority/status combinations will look. Click on a link to edit
        a priority or a status.
    </div>

    @(Html
        .Grid("MvcGrid/_GridBootstrap4", Model.DataTable.Rows.Cast<DataRow>())
        .Build(columns =>
        {
            foreach (DataColumn column in Model.DataTable.Columns)
            {
                columns.Add(model => model[column.ColumnName])
                    .Named(column.ColumnName)
                    .Titled(column.ColumnName.Replace("<br>", " ").Replace("$no_sort_", string.Empty))
                    .Encoded(false)
                    .Sortable(true);
            }
        })
        .Empty("No priority/status combos in the database.")
        //.UsingProcessingMode(GridProcessingMode.Manual)
        .Sortable()
        //.Pageable()
        )

    <div cls="lbl">Relevant lines from btnet_custom.css:</div>
    <div class="frm" style="width: 600px;" id="relevant_lines" runat="server">
        @Html.Raw(ViewBag.RelevantLines)
    </div>
</div>

@section BodyFooter {
    @Html.Raw(BugTracker.Web.Core.Util.CustomFooterHtml)
}