@*
    Copyright 2002-2011 Corey Trager
    Copyright 2017-2019 Ivan Grek

    Distributed under the terms of the GNU General Public License
*@

@model BugTracker.Web.Areas.Administration.Models.CustomField.CreateModel

@{
    var page = (BugTracker.Web.Models.PageModel)ViewBag.Page;

    ViewBag.Title = page.Title;
}

@section Styles {
}

@section Scripts {
}

@section BodyHeader {
    @Html.Partial("_MainMenu", page)
}

@section BodySubHeader {
}

<div class="row">
    <div class="col-lg-6">
        <div class="card bg-light">
            <div class="card-body">
                @using (Html.BeginForm("Create", "CustomField", FormMethod.Post, new { @class = "frm" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.Partial("_ValidationSummary")

                    <div class="form-group">
                        @Html.LabelFor(x => x.Name):
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", maxlength = "30", size = "30" })
                        @Html.ValidationMessageFor(x => x.Name, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">Don't use single quotes, &gt;, or &lt; characters in the Field Name.</small>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.DropdownType):
                        @Html.DropDownListFor(x => x.DropdownType, (List<SelectListItem>)ViewBag.DropdownTypes, new { @class = "form-control" })
                        @Html.ValidationMessageFor(x => x.DropdownType, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">
                            A dropdown type of "normal" uses the values specified in "Normal Dropdown Values"
                            below. A dropdown type of "users" is filled with values from the users table. The
                            same list that is used for "assigned to" will be used for a "user" dropdown.
                        </small>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.DataType):
                        @Html.DropDownListFor(x => x.DataType, (List<SelectListItem>)ViewBag.DataTypes, new { @class = "form-control" })
                        <small class="form-text text-muted">For "user" dropdown, select "int"</small>
                        @Html.ValidationMessageFor(x => x.DataType, null, new { @class = "text-danger" }, "small")
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.Length):
                        @Html.TextBoxFor(x => x.Length, new { @class = "form-control", maxlength = "6", size = "6" })
                        @Html.ValidationMessageFor(x => x.Length, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">
                            For text type fields like char, varchar, nvarchar, etc, specify max length.<br>
                            <br>
                            For decimal type, specify as A,B where A is the total number of digits and<br>
                            B is the number of those digits to the right of decimal point.
                        </small>
                    </div>

                    <div class="form-group form-check">
                        @Html.CheckBoxFor(x => x.Required, new { @class = "form-check-input" })
                        @Html.LabelFor(x => x.Required, new { @class = "form-check-label" })
                        @Html.ValidationMessageFor(x => x.Required, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">If you specify required, you must supply a default.&nbsp;&nbsp;Don't forget the parenthesis.</small>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.Default):
                        @Html.TextBoxFor(x => x.Default, new { @class = "form-control", maxlength = "30", size = "30" })
                        @Html.ValidationMessageFor(x => x.Default, null, new { @class = "text-danger" }, "small")
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.DropdownValues):
                        @Html.TextAreaFor(x => x.DropdownValues, new { @class = "form-control", rows = "6", cols = "60" })
                        @Html.ValidationMessageFor(x => x.DropdownValues, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">
                            Use the following if you want the custom field to be a "normal" dropdown.
                            <br>
                            Create a pipe seperated list of values as shown below.
                            <br>
                            No individiual value should be longer than the length of your custom field.
                            <br>
                            Don't use commas, &gt;, &lt;, or quotes in the list of values.
                            <br>
                            Line breaks for your readability are ok.
                            <br>
                            Here are some examples:
                            <br>
                            "1.0|1.1|1.2"
                            <br>
                            "red|blue|green"
                            <br>
                            It's ok to have one of the values be blank:<br>
                            "|red|blue|green"
                        </small>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.SortSequence):
                        @Html.TextBoxFor(x => x.SortSequence, new { @class = "form-control", maxlength = "2", size = "2" })
                        @Html.ValidationMessageFor(x => x.SortSequence, null, new { @class = "text-danger" }, "small")
                        <small class="form-text text-muted">Controls what order the custom fields display on the page.</small>
                    </div>

                    <button type="submit" class="btn btn-success">Create</button>
                    <a href="@Url.Action("Index")" class="btn btn-link">Cancel</a>
                }
            </div>
        </div>
    </div>
</div>

@section BodyFooter {
    @Html.Raw(BugTracker.Web.Core.Util.Context.Application["custom_footer"])
}
