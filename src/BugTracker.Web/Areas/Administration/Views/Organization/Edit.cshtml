@*
    Copyright 2002-2011 Corey Trager
    Copyright 2017-2019 Ivan Grek

    Distributed under the terms of the GNU General Public License
*@

@using System.Data
@using BugTracker.Web.Core.Identification
@using BugTracker.Web.Models
@model BugTracker.Web.Areas.Administration.Models.Organization.EditModel

@{
    var page = (PageModel) ViewBag.Page;

    ViewBag.Title = page.Title;
}

@section Styles {
}

@section Scripts {
}

@section BodyHeader {
    @Html.Partial("_MainMenu", page)
}

@section BodySubHeader {
}

<div class="row">
<div class="col-lg-6">
<div class="card bg-light">
<div class="card-body">
@using (Html.BeginForm(Model.Id == 0 ? "Create" : "Update", "Organization", FormMethod.Post, new {@class = "frm"}))
{
    @Html.AntiForgeryToken()
    @Html.Partial("_ValidationSummary")

    @Html.HiddenFor(x => x.Id)

    <div class="form-group">
        @Html.LabelFor(x => x.Name):
        @Html.TextBoxFor(x => x.Name, new {@class = "form-control", maxlength = "30", size = "30"})
        @Html.ValidationMessageFor(x => x.Name, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Domain):
        @Html.TextBoxFor(x => x.Domain, new {@class = "form-control", maxlength = "80", size = "30"})
        @Html.ValidationMessageFor(x => x.Domain, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.Active, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.Active, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.Active, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.OtherOrgsPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    var id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OtherOrgsPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OtherOrgsPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OtherOrgsPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OtherOrgsPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OtherOrgsPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OtherOrgsPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.OtherOrgsPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanSearch, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanSearch, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanSearch, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.ExternalUser, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.ExternalUser, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.ExternalUser, null, new {@class = "text-danger"}, "small")
        <small class="form-text text-muted">External users cannot view posts marked "Visible for internal users only"</small>
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanOnlySeeOwnReported, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanOnlySeeOwnReported, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanOnlySeeOwnReported, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanBeAssignedTo, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanBeAssignedTo, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanBeAssignedTo, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.NonAdminsCanUse, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.NonAdminsCanUse, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.NonAdminsCanUse, null, new {@class = "text-danger"}, "small")
    </div>

    <h6 class="card-title">Field level permissions</h6>

    <div class="form-group">
        @Html.LabelFor(x => x.ProjectFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.ProjectFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.ProjectFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.ProjectFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.ProjectFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.ProjectFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.ProjectFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.ProjectFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.OrgFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OrgFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OrgFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OrgFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OrgFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.OrgFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.OrgFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.OrgFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.CategoryFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.CategoryFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.CategoryFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.CategoryFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.CategoryFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.CategoryFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.CategoryFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.CategoryFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.PriorityFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.PriorityFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.PriorityFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.PriorityFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.PriorityFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.PriorityFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.PriorityFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.PriorityFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.StatusFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.StatusFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.StatusFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.StatusFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.StatusFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.StatusFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.StatusFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.StatusFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.AssignedToFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.AssignedToFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.AssignedToFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.AssignedToFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.AssignedToFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.AssignedToFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.AssignedToFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.AssignedToFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.UdfFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.UdfFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.UdfFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.UdfFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.UdfFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.UdfFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.UdfFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.UdfFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.TagsFieldPermissionLevel):

        <div>
            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.TagsFieldPermissionLevel, SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.TagsFieldPermissionLevel, "none", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.TagsFieldPermissionLevel, SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.TagsFieldPermissionLevel, "view only", new {@for = id, @class = "form-check-label"})
            </div>

            <div class="form-check form-check-inline">
                @{
                    id = Guid.NewGuid();
                }

                @Html.RadioButtonFor(x => x.TagsFieldPermissionLevel, SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                @Html.LabelFor(x => x.TagsFieldPermissionLevel, "edit", new {@for = id, @class = "form-check-label"})
            </div>
        </div>

        @Html.ValidationMessageFor(x => x.TagsFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
    </div>

    foreach (DataRow drCustom in ViewBag.CustomColumns.Tables[0].Rows)
    {
        var bgName = (string) drCustom["name"];
        var selectedVal = ViewBag.DictCustomFieldPermissionLevel[bgName];

        <div class="form-group">
            @Html.Label(bgName, $"\"{bgName}\" field permission"):

            <div>
                <div class="form-check form-check-inline">
                    @{
                        id = Guid.NewGuid();
                    }

                    @Html.RadioButton(bgName, (int) SecurityPermissionLevel.PermissionNone, (SecurityPermissionLevel) selectedVal == SecurityPermissionLevel.PermissionNone, new {id, @class = "form-check-input"})
                    @Html.Label(bgName, "none", new {@for = id, @class = "form-check-label"})
                </div>

                <div class="form-check form-check-inline">
                    @{
                        id = Guid.NewGuid();
                    }

                    @Html.RadioButton(bgName, (int) SecurityPermissionLevel.PermissionReadonly, (SecurityPermissionLevel) selectedVal == SecurityPermissionLevel.PermissionReadonly, new {id, @class = "form-check-input"})
                    @Html.Label(bgName, "view only", new {@for = id, @class = "form-check-label"})
                </div>

                <div class="form-check form-check-inline">
                    @{
                        id = Guid.NewGuid();
                    }

                    @Html.RadioButton(bgName, (int) SecurityPermissionLevel.PermissionAll, (SecurityPermissionLevel) selectedVal == SecurityPermissionLevel.PermissionAll, new {id, @class = "form-check-input"})
                    @Html.Label(bgName, "edit", new {@for = id, @class = "form-check-label"})
                </div>
            </div>

            @Html.ValidationMessageFor(x => x.TagsFieldPermissionLevel, null, new {@class = "text-danger"}, "small")
        </div>
    }

    <h6 class="card-title">Non-admins permissions</h6>

    <div class="alert alert-info" role="alert">
        Use the following settings to control permissions for non-admins.
        Admins have all permissions regardless of these settings.
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanEditSql, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanEditSql, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanEditSql, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanDeleteBug, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanDeleteBug, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanDeleteBug, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanEditAndDeletePosts, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanEditAndDeletePosts, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanEditAndDeletePosts, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanMergeBugs, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanMergeBugs, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanMergeBugs, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanMassEditBugs, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanMassEditBugs, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanMassEditBugs, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanUseReports, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanUseReports, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanUseReports, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanEditReports, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanEditReports, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanEditReports, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanViewTasks, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanViewTasks, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanViewTasks, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanEditTasks, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanEditTasks, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanEditTasks, null, new {@class = "text-danger"}, "small")
    </div>

    <div class="form-group form-check">
        @Html.CheckBoxFor(x => x.CanAssignToInternalUsers, new {@class = "form-check-input"})
        @Html.LabelFor(x => x.CanAssignToInternalUsers, new {@class = "form-check-label"})
        @Html.ValidationMessageFor(x => x.CanAssignToInternalUsers, null, new {@class = "text-danger"}, "small")
    </div>

    <button type="submit" class="btn btn-success">@(Model.Id == 0 ? "Create" : "Update")</button>
    <a href="@Url.Action("Index")" class="btn btn-link">Cancel</a>
}
</div>
</div>
</div>
</div>

@section BodyFooter {
    @Html.Raw(BugTracker.Web.Core.Util.CustomFooterHtml)
}