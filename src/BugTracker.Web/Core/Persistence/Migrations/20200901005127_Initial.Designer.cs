// <auto-generated />
using System;
using BugTracker.Web.Core.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BugTracker.Web.Migrations
{
    [DbContext(typeof(BtNetDbContext))]
    [Migration("20200901005127_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Bug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bg_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnName("bg_assigned_to_user")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnName("bg_category")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("bg_short_desc")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("OrganizationId")
                        .HasColumnName("bg_org")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnName("bg_priority")
                        .HasColumnType("int");

                    b.Property<string>("ProjectCustomDropdown1Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCustomDropdown2Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCustomDropdown3Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnName("bg_project")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportedOn")
                        .HasColumnName("bg_reported_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReportedUserId")
                        .HasColumnName("bg_reported_user")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnName("bg_status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnName("bg_tags")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdatedOn")
                        .IsRequired()
                        .HasColumnName("bg_project_custom_dropdown_value3")
                        .HasColumnType("datetime2")
                        .HasMaxLength(120);

                    b.Property<int?>("UpdatedUserId")
                        .IsRequired()
                        .HasColumnName("bg_last_updated_user")
                        .HasColumnType("int");

                    b.Property<int?>("UserDefinedAttributeId")
                        .HasColumnName("bg_user_defined_attribute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("bugs");
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ct_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Default")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ct_default")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("ct_name")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("SortSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ct_sort_seq")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Default = 0,
                            Name = "Bug",
                            SortSequence = 0
                        },
                        new
                        {
                            Id = 2,
                            Default = 0,
                            Name = "Enhancement",
                            SortSequence = 0
                        },
                        new
                        {
                            Id = 3,
                            Default = 0,
                            Name = "Task",
                            SortSequence = 0
                        },
                        new
                        {
                            Id = 4,
                            Default = 0,
                            Name = "Question",
                            SortSequence = 0
                        },
                        new
                        {
                            Id = 5,
                            Default = 0,
                            Name = "Ticket",
                            SortSequence = 0
                        });
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.DashboardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ds_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChartType")
                        .IsRequired()
                        .HasColumnName("ds_chart_type")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("Column")
                        .HasColumnName("ds_col")
                        .HasColumnType("int");

                    b.Property<int>("ReportId")
                        .HasColumnName("ds_report")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnName("ds_row")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("ds_user")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("dashboard_items");
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_active")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("AssignedToFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_assigned_to_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("CanAssignToInternalUsers")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_assign_to_internal_users")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanBeAssignedTo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_be_assigned_to")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CanDeleteBug")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_delete_bug")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanEditAndDeletePosts")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_edit_and_delete_posts")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanEditReports")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_edit_reports")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanEditSql")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_edit_sql")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanEditTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_edit_tasks")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanMassEditBugs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_mass_edit_bugs")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanMergeBugs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_merge_bugs")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanOnlySeeOwnReported")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_only_see_own_reported")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanSearch")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_search")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("CanUseReports")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_use_reports")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CanViewTasks")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_can_view_tasks")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CategoryFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_category_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<string>("Domain")
                        .HasColumnName("og_domain")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("ExternalUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_external_user")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("og_name")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<int>("NonAdminsCanUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_non_admins_can_use")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("OrgFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_org_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("OtherOrgsPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_other_orgs_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("PriorityFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_priority_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("ProjectFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_project_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("StatusFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_status_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("TagsFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_tags_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("UdfFieldPermissionLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("og_udf_field_permission_level")
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("orgs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 0,
                            AssignedToFieldPermissionLevel = 0,
                            CanAssignToInternalUsers = 0,
                            CanBeAssignedTo = 1,
                            CanDeleteBug = 0,
                            CanEditAndDeletePosts = 0,
                            CanEditReports = 0,
                            CanEditSql = 0,
                            CanEditTasks = 0,
                            CanMassEditBugs = 0,
                            CanMergeBugs = 0,
                            CanOnlySeeOwnReported = 0,
                            CanSearch = 0,
                            CanUseReports = 0,
                            CanViewTasks = 0,
                            CategoryFieldPermissionLevel = 0,
                            ExternalUser = 0,
                            Name = "org1",
                            NonAdminsCanUse = 0,
                            OrgFieldPermissionLevel = 0,
                            OtherOrgsPermissionLevel = 2,
                            PriorityFieldPermissionLevel = 0,
                            ProjectFieldPermissionLevel = 0,
                            StatusFieldPermissionLevel = 0,
                            TagsFieldPermissionLevel = 0,
                            UdfFieldPermissionLevel = 0
                        },
                        new
                        {
                            Id = 2,
                            Active = 0,
                            AssignedToFieldPermissionLevel = 0,
                            CanAssignToInternalUsers = 0,
                            CanBeAssignedTo = 1,
                            CanDeleteBug = 0,
                            CanEditAndDeletePosts = 0,
                            CanEditReports = 0,
                            CanEditSql = 0,
                            CanEditTasks = 0,
                            CanMassEditBugs = 0,
                            CanMergeBugs = 0,
                            CanOnlySeeOwnReported = 0,
                            CanSearch = 0,
                            CanUseReports = 0,
                            CanViewTasks = 0,
                            CategoryFieldPermissionLevel = 0,
                            ExternalUser = 0,
                            Name = "developers",
                            NonAdminsCanUse = 0,
                            OrgFieldPermissionLevel = 0,
                            OtherOrgsPermissionLevel = 2,
                            PriorityFieldPermissionLevel = 0,
                            ProjectFieldPermissionLevel = 0,
                            StatusFieldPermissionLevel = 0,
                            TagsFieldPermissionLevel = 0,
                            UdfFieldPermissionLevel = 0
                        },
                        new
                        {
                            Id = 3,
                            Active = 0,
                            AssignedToFieldPermissionLevel = 0,
                            CanAssignToInternalUsers = 0,
                            CanBeAssignedTo = 1,
                            CanDeleteBug = 0,
                            CanEditAndDeletePosts = 0,
                            CanEditReports = 0,
                            CanEditSql = 0,
                            CanEditTasks = 0,
                            CanMassEditBugs = 0,
                            CanMergeBugs = 0,
                            CanOnlySeeOwnReported = 0,
                            CanSearch = 0,
                            CanUseReports = 0,
                            CanViewTasks = 0,
                            CategoryFieldPermissionLevel = 0,
                            ExternalUser = 0,
                            Name = "testers",
                            NonAdminsCanUse = 0,
                            OrgFieldPermissionLevel = 0,
                            OtherOrgsPermissionLevel = 2,
                            PriorityFieldPermissionLevel = 0,
                            ProjectFieldPermissionLevel = 0,
                            StatusFieldPermissionLevel = 0,
                            TagsFieldPermissionLevel = 0,
                            UdfFieldPermissionLevel = 0
                        },
                        new
                        {
                            Id = 4,
                            Active = 0,
                            AssignedToFieldPermissionLevel = 0,
                            CanAssignToInternalUsers = 0,
                            CanBeAssignedTo = 0,
                            CanDeleteBug = 0,
                            CanEditAndDeletePosts = 0,
                            CanEditReports = 0,
                            CanEditSql = 0,
                            CanEditTasks = 0,
                            CanMassEditBugs = 0,
                            CanMergeBugs = 0,
                            CanOnlySeeOwnReported = 0,
                            CanSearch = 0,
                            CanUseReports = 0,
                            CanViewTasks = 0,
                            CategoryFieldPermissionLevel = 0,
                            ExternalUser = 1,
                            Name = "client one",
                            NonAdminsCanUse = 0,
                            OrgFieldPermissionLevel = 0,
                            OtherOrgsPermissionLevel = 0,
                            PriorityFieldPermissionLevel = 0,
                            ProjectFieldPermissionLevel = 0,
                            StatusFieldPermissionLevel = 0,
                            TagsFieldPermissionLevel = 0,
                            UdfFieldPermissionLevel = 0
                        },
                        new
                        {
                            Id = 5,
                            Active = 0,
                            AssignedToFieldPermissionLevel = 0,
                            CanAssignToInternalUsers = 0,
                            CanBeAssignedTo = 0,
                            CanDeleteBug = 0,
                            CanEditAndDeletePosts = 0,
                            CanEditReports = 0,
                            CanEditSql = 0,
                            CanEditTasks = 0,
                            CanMassEditBugs = 0,
                            CanMergeBugs = 0,
                            CanOnlySeeOwnReported = 0,
                            CanSearch = 0,
                            CanUseReports = 0,
                            CanViewTasks = 0,
                            CategoryFieldPermissionLevel = 0,
                            ExternalUser = 1,
                            Name = "client two",
                            NonAdminsCanUse = 0,
                            OrgFieldPermissionLevel = 0,
                            OtherOrgsPermissionLevel = 0,
                            PriorityFieldPermissionLevel = 0,
                            ProjectFieldPermissionLevel = 0,
                            StatusFieldPermissionLevel = 0,
                            TagsFieldPermissionLevel = 0,
                            UdfFieldPermissionLevel = 0
                        });
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_active")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("AutoAssignDefaultUser")
                        .HasColumnName("pj_auto_assign_default_user")
                        .HasColumnType("int");

                    b.Property<int?>("AutoSubscribeDefaultUser")
                        .HasColumnName("pj_auto_subscribe_default_user")
                        .HasColumnType("int");

                    b.Property<string>("CustomDropdown1Label")
                        .HasColumnName("pj_custom_dropdown_label1")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CustomDropdown1Values")
                        .HasColumnName("pj_custom_dropdown_values1")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<string>("CustomDropdown2Label")
                        .HasColumnName("pj_custom_dropdown_label2")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CustomDropdown2Values")
                        .HasColumnName("pj_custom_dropdown_values2")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<string>("CustomDropdown3Label")
                        .HasColumnName("pj_custom_dropdown_label3")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("CustomDropdown3Values")
                        .HasColumnName("pj_custom_dropdown_values3")
                        .HasColumnType("nvarchar(800)")
                        .HasMaxLength(800);

                    b.Property<int>("Default")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_default")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("DefaultUserId")
                        .HasColumnName("pj_default_user")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnName("pj_description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("EnableCustomDropdown1")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_enable_custom_dropdown1")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EnableCustomDropdown2")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_enable_custom_dropdown2")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EnableCustomDropdown3")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pj_enable_custom_dropdown3")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("EnablePop3")
                        .HasColumnName("pj_enable_pop3")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("pj_name")
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.Property<string>("Pop3EmailFrom")
                        .HasColumnName("pj_pop3_email_from")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<string>("Pop3Password")
                        .HasColumnName("pj_pop3_password")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Pop3Username")
                        .HasColumnName("pj_pop3_username")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 0,
                            Default = 0,
                            EnableCustomDropdown1 = 0,
                            EnableCustomDropdown2 = 0,
                            EnableCustomDropdown3 = 0,
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 2,
                            Active = 0,
                            Default = 0,
                            EnableCustomDropdown1 = 0,
                            EnableCustomDropdown2 = 0,
                            EnableCustomDropdown3 = 0,
                            Name = "Project 2"
                        });
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("qu_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Default")
                        .HasColumnName("qu_default")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("qu_desc")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("qu_org")
                        .HasColumnType("int");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnName("qu_sql")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnName("qu_user")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name", "UserId", "OrganizationId")
                        .IsUnique()
                        .HasFilter("[qu_user] IS NOT NULL AND [qu_org] IS NOT NULL");

                    b.ToTable("queries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Default = 1,
                            Name = "All bugs",
                            Sql = @"
                        select isnull(pr_background_color,''#ffffff''), bg_id [id], isnull(bu_flag,0) [$FLAG], 
                        bg_short_desc [desc], isnull(pj_name,'''') [project], isnull(og_name,'''') [organization], isnull(ct_name,'''') [category], rpt.us_username [reported by],
                        bg_reported_date [reported on], isnull(pr_name,'''') [priority], isnull(asg.us_username,'''') [assigned to],
                        isnull(st_name,'''') [status], isnull(lu.us_username,'''') [last updated by], bg_last_updated_date [last updated on]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join users rpt on rpt.us_id = bg_reported_user
                        left outer join users asg on asg.us_id = bg_assigned_to_user
                        left outer join users lu on lu.us_id = bg_last_updated_user
                        left outer join projects on pj_id = bg_project
                        left outer join orgs on og_id = bg_org
                        left outer join categories on ct_id = bg_category
                        left outer join priorities on pr_id = bg_priority
                        left outer join statuses on st_id = bg_status
                        order by bg_id desc"
                        },
                        new
                        {
                            Id = 2,
                            Default = 0,
                            Name = "Open bugs",
                            Sql = @"
                        select isnull(pr_background_color,''#ffffff''), bg_id [id], isnull(bu_flag,0) [$FLAG],
                        bg_short_desc [desc], isnull(pj_name,'''') [project], isnull(og_name,'''') [organization], isnull(ct_name,'''') [category], rpt.us_username [reported by],
                        bg_reported_date [reported on], isnull(pr_name,'''') [priority], isnull(asg.us_username,'''') [assigned to],
                        isnull(st_name,'''') [status], isnull(lu.us_username,'''') [last updated by], bg_last_updated_date [last updated on]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join users rpt on rpt.us_id = bg_reported_user
                        left outer join users asg on asg.us_id = bg_assigned_to_user
                        left outer join users lu on lu.us_id = bg_last_updated_user
                        left outer join projects on pj_id = bg_project
                        left outer join orgs on og_id = bg_org
                        left outer join categories on ct_id = bg_category
                        left outer join priorities on pr_id = bg_priority
                        left outer join statuses on st_id = bg_status
                        where bg_status <> 5 order by bg_id desc"
                        },
                        new
                        {
                            Id = 3,
                            Default = 0,
                            Name = "Open bugs assigned to me",
                            Sql = @"
                        select isnull(pr_background_color,''#ffffff''), bg_id [id], isnull(bu_flag,0) [$FLAG],
                        bg_short_desc [desc], isnull(pj_name,'''') [project], isnull(og_name,'''') [organization], isnull(ct_name,'''') [category], rpt.us_username [reported by],
                        bg_reported_date [reported on], isnull(pr_name,'''') [priority], isnull(asg.us_username,'''') [assigned to],
                        isnull(st_name,'''') [status], isnull(lu.us_username,'''') [last updated by], bg_last_updated_date [last updated on]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join users rpt on rpt.us_id = bg_reported_user
                        left outer join users asg on asg.us_id = bg_assigned_to_user
                        left outer join users lu on lu.us_id = bg_last_updated_user
                        left outer join projects on pj_id = bg_project
                        left outer join orgs on og_id = bg_org
                        left outer join categories on ct_id = bg_category
                        left outer join priorities on pr_id = bg_priority
                        left outer join statuses on st_id = bg_status
                        where bg_status <> 5 and bg_assigned_to_user = $ME order by bg_id desc"
                        },
                        new
                        {
                            Id = 4,
                            Default = 0,
                            Name = "Checked in bugs - for QA",
                            Sql = @"
                        select isnull(pr_background_color,''#ffffff''), bg_id [id], isnull(bu_flag,0) [$FLAG],
                        bg_short_desc [desc], isnull(pj_name,'''') [project], isnull(og_name,'''') [organization], isnull(ct_name,'''') [category], rpt.us_username [reported by],
                        bg_reported_date [reported on], isnull(pr_name,'''') [priority], isnull(asg.us_username,'''') [assigned to],'
                        isnull(st_name,'''') [status], isnull(lu.us_username,'''') [last updated by], bg_last_updated_date [last updated on]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join users rpt on rpt.us_id = bg_reported_user
                        left outer join users asg on asg.us_id = bg_assigned_to_user
                        left outer join users lu on lu.us_id = bg_last_updated_user
                        left outer join projects on pj_id = bg_project
                        left outer join orgs on og_id = bg_org
                        left outer join categories on ct_id = bg_category
                        left outer join priorities on pr_id = bg_priority
                        left outer join statuses on st_id = bg_status
                        where bg_status = 3 order by bg_id desc"
                        },
                        new
                        {
                            Id = 5,
                            Default = 0,
                            Name = "Demo use of css classes",
                            Sql = @"
                        select isnull(pr_style + st_style,''datad''), bg_id [id], isnull(bu_flag,0) [$FLAG], bg_short_desc [desc], isnull(pr_name,'''') [priority], isnull(st_name,'''') [status]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join priorities on pr_id = bg_priority
                        left outer join statuses on st_id = bg_status
                        order by bg_id desc"
                        },
                        new
                        {
                            Id = 6,
                            Default = 0,
                            Name = "Demo last comment as column",
                            Sql = @"
                        select ''#ffffff'', bg_id [id], bg_short_desc [desc], 
                        substring(bp_comment_search,1,40) [last comment], bp_date [last comment date]
                        from bugs
                        left outer join bug_posts on bg_id = bp_bug
                        and bp_type = ''comment''' 
                        and bp_date in (select max(bp_date) from bug_posts where bp_bug = bg_id)
                        WhErE 1 = 1
                        order by bg_id desc"
                        },
                        new
                        {
                            Id = 7,
                            Default = 0,
                            Name = "Days in status",
                            Sql = @"
                        select case 
                        when datediff(d, isnull(bp_date,bg_reported_date), getdate()) > 90 then ''#ff9999''
                        when datediff(d, isnull(bp_date,bg_reported_date), getdate()) > 30 then ''#ffcccc''
                        when datediff(d, isnull(bp_date,bg_reported_date), getdate()) > 7 then ''#ffdddd''
                        else ''#ffffff'' end,
                        bg_id [id], bg_short_desc [desc],
                        datediff(d, isnull(bp_date,bg_reported_date), getdate()) [days in status],
                        st_name [status],
                        isnull(bp_comment,'''') [last status change], isnull(bp_date,bg_reported_date) [status date]
                        from bugs
                        inner join statuses on bg_status = st_id
                        left outer join bug_posts on bg_id = bp_bug
                        and bp_type = ''update'' 
                        and bp_comment like ''changed status from%''
                        and bp_date in (select max(bp_date) from bug_posts where bp_bug = bg_id)
                        WhErE 1 = 1
                        order by 4 desc"
                        },
                        new
                        {
                            Id = 8,
                            Default = 0,
                            Name = "Bugs with attachments",
                            Sql = @"
                        select bp_bug, sum(bp_size) bytes
                        into #t
                        from bug_posts
                        where bp_type = ''file''
                        group by bp_bug '
                        select ''#ffffff'', bg_id [id], bg_short_desc [desc],
                        bytes, rpt.us_username [reported by]
                        from bugs
                        inner join #t on bp_bug = bg_id
                        left outer join users rpt on rpt.us_id = bg_reported_user
                        WhErE 1 = 1
                        order by bytes desc
                        drop table #t"
                        },
                        new
                        {
                            Id = 9,
                            Default = 0,
                            Name = "Bugs with related bugs",
                            Sql = @"
                        select ''#ffffff'', bg_id [id], bg_short_desc [desc],
                        isnull(st_name,'''') [status],
                        count(*) [number of related bugs]
                        from bugs
                        inner join bug_relationships on re_bug1 = bg_id
                        inner join statuses on bg_status = st_id
                        /*ENDWHR*/
                        group by bg_id, bg_short_desc, isnull(st_name,'''')
                        order by bg_id desc "
                        },
                        new
                        {
                            Id = 10,
                            Default = 0,
                            Name = "Demo votes feature",
                            Sql = @"
                        select ''#ffffff'', bg_id [id],
                        (isnull(vote_total,0) * 10000) + isnull(bu_vote,0) [$VOTE],
                        bg_short_desc [desc], isnull(st_name,'''') [status]
                        from bugs
                        left outer join bug_user on bu_bug = bg_id and bu_user = $ME
                        left outer join votes_view on vote_bug = bg_id
                        left outer join statuses on st_id = bg_status
                        order by 3 desc"
                        });
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("rp_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChartType")
                        .IsRequired()
                        .HasColumnName("rp_chart_type")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("rp_desc")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnName("rp_sql")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("reports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChartType = "pie",
                            Name = "Bugs by Status",
                            Sql = @"
                        select
                            st_name [status],
                            count(1) [count]
                        from
                            bugs 

                            inner join statuses on bg_status = st_id
                        group by
                            st_name
                        order by
                            st_name"
                        },
                        new
                        {
                            Id = 2,
                            ChartType = "pie",
                            Name = "Bugs by Priority",
                            Sql = @"
                        select
                            pr_name [priority],
                            count(1) [count]
                        from
                            bugs

                            inner join priorities on bg_priority = pr_id
                        group by
                            pr_name
                        order by
                            pr_name"
                        },
                        new
                        {
                            Id = 3,
                            ChartType = "pie",
                            Name = "Bugs by Category",
                            Sql = @"
                        select
                            ct_name [category],
                            count(1) [count]
                        from
                            bugs

                            inner join categories on bg_category = ct_id
                        group
                            by ct_name
                        order by
                            ct_name"
                        },
                        new
                        {
                            Id = 4,
                            ChartType = "bar",
                            Name = "Bugs by Month",
                            Sql = @"
                        select
                            month(bg_reported_date) [month],
                            count(1) [count]
                        from
                            bugs
                        group by
                            year(bg_reported_date),
                            month(bg_reported_date)
                        order by
                            year(bg_reported_date),
                            month(bg_reported_date)"
                        },
                        new
                        {
                            Id = 5,
                            ChartType = "line",
                            Name = "Bugs by Day of Year",
                            Sql = @"
                        select
                            datepart(dy, bg_reported_date) [day of year],
                            count(1) [count]
                        from
                            bugs
                        group by
                            datepart(dy, bg_reported_date),
                            datepart(dy,bg_reported_date)
                        order by 1"
                        },
                        new
                        {
                            Id = 6,
                            ChartType = "table",
                            Name = "Bugs by User",
                            Sql = @"
                        select
                            bg_reported_user,
                            count(1) [r]
                        into #t
                        from
                            bugs
                        group by
                            bg_reported_user;

                        select
                            bg_assigned_to_user,
                            count(1) [a]
                        into #t2
                        from
                            bugs
                        group by
                            bg_assigned_to_user;

                        select
                            us_username,
                            r [reported],
                            a [assigned]
                        from
                            users
                            
                            left outer join #t on bg_reported_user = us_id
                            left outer join #t2 on bg_assigned_to_user = us_id
                        order by 1"
                        },
                        new
                        {
                            Id = 7,
                            ChartType = "table",
                            Name = "Hours by Org, Year, Month",
                            Sql = @"
                        select
                            og_name [organization],
                            datepart(year,tsk_created_date) [year],
                            datepart(month,tsk_created_date) [month],
                            convert(decimal(8,1),
                            sum( 
                                case 
                                when tsk_duration_units = ''minutes''
                                    then tsk_actual_duration / 60.0
                                when tsk_duration_units = ''days''
                                    then tsk_actual_duration * 8.0
                                else tsk_actual_duration * 1.0 end)
                            ) [total hours]
                        from
                            bug_tasks

                            inner join bugs on tsk_bug = bg_id
                            inner join orgs on bg_org = og_id
                        where
                            isnull(tsk_actual_duration,0) <> 0
                        group by
                            og_name,
                            datepart(year,tsk_created_date),
                            datepart(month,tsk_created_date)"
                        },
                        new
                        {
                            Id = 8,
                            ChartType = "table",
                            Name = "Hours Remaining by Project",
                            Sql = @"
                        select
                            pj_name [project],
                            convert(
                                decimal(8,1),
                                sum(
                                    case
                                        when tsk_duration_units = ''minutes''
                                            then tsk_planned_duration / 60.0 * .01 * (100 - isnull(tsk_percent_complete,0))
                                        when tsk_duration_units = ''days''
                                            then tsk_planned_duration * 8.0  * .01 * (100 - isnull(tsk_percent_complete,0))
                                        else tsk_planned_duration * .01 * (100 - isnull(tsk_percent_complete,0))
                                    end
                                )
                            ) [total hours]
                        from
                            bug_tasks

                            inner join bugs on tsk_bug = bg_id
                            inner join projects on bg_project = pj_id
                        where
                            isnull(tsk_planned_duration,0) <> 0
                        group
                            by pj_name"
                        });
                });

            modelBuilder.Entity("BugTracker.Web.Core.Persistence.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_active")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_admin")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("AssignedNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_assigned_notifications")
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<int>("AutoSubscribe")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_auto_subscribe")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("AutoSubscribeOwnBugs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_auto_subscribe_own_bugs")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("AutoSubscribeReportedBugs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_auto_subscribe_reported_bugs")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("BugsPerPage")
                        .HasColumnName("us_bugs_per_page")
                        .HasColumnType("int");

                    b.Property<int>("CreatedUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_created_user")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("DefaultQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_default_query")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Email")
                        .HasColumnName("us_email")
                        .HasColumnType("nvarchar(120)")
                        .HasMaxLength(120);

                    b.Property<int>("EnableBugListPopups")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_enable_bug_list_popups")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("EnableNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_enable_notifications")
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("FirstName")
                        .HasColumnName("us_firstname")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int?>("ForcedProjectId")
                        .HasColumnName("us_forced_project")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnName("us_lastname")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<DateTime?>("MostRecentLoginDateTime")
                        .HasColumnName("us_most_recent_login_datetime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_org")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("us_password")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("PasswordResetKey")
                        .HasColumnName("password_reset_key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("ReportedNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_reported_notifications")
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("Salt")
                        .HasColumnName("us_salt")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("SendNotificationsToSelf")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_send_notifications_to_self")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Signature")
                        .HasColumnName("us_signature")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("SubscribedNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_subscribed_notifications")
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<int>("UseFckeditor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("us_use_fckeditor")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("us_username")
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = 1,
                            Admin = 1,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "System",
                            LastName = "Administrator",
                            OrganizationId = 1,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 2,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Al",
                            LastName = "Kaline",
                            OrganizationId = 2,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "developer"
                        },
                        new
                        {
                            Id = 3,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 4,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Norman",
                            LastName = "Cash",
                            OrganizationId = 4,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "tester"
                        },
                        new
                        {
                            Id = 4,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Bill",
                            LastName = "Freehan",
                            OrganizationId = 4,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "customer1"
                        },
                        new
                        {
                            Id = 5,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Denny",
                            LastName = "McClain",
                            OrganizationId = 5,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "customer2"
                        },
                        new
                        {
                            Id = 6,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "for POP3",
                            LastName = "BugTracker.MailService.exe",
                            OrganizationId = 1,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "email"
                        },
                        new
                        {
                            Id = 7,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Read",
                            ForcedProjectId = 1,
                            LastName = "Only",
                            OrganizationId = 1,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "viewer"
                        },
                        new
                        {
                            Id = 8,
                            Active = 1,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Report And",
                            ForcedProjectId = 1,
                            LastName = "Comment Only",
                            OrganizationId = 1,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "reporter"
                        },
                        new
                        {
                            Id = 9,
                            Active = 0,
                            Admin = 0,
                            AssignedNotifications = 0,
                            AutoSubscribe = 0,
                            CreatedUserId = 0,
                            DefaultQueryId = 1,
                            EnableBugListPopups = 0,
                            EnableNotifications = 0,
                            FirstName = "Special",
                            ForcedProjectId = 1,
                            LastName = "Cannot save searches",
                            OrganizationId = 1,
                            Password = "*�d6�t�d>bK�6V�)&u8E�R��e����sA�L<+���~Yf�������jb��5���t˯9���D���&d���B��kHs�5�׌L��1�g���F���䁪N�Ke4~����c^$",
                            ReportedNotifications = 0,
                            Salt = "uTgBGWekorP3r",
                            SubscribedNotifications = 0,
                            UseFckeditor = 0,
                            Username = "guest"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
