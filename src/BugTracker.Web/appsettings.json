{
  "ConnectionStrings": {
    "DefaultConnection": "Server=.\\SQLEXPRESS;Database=btnet;User Id=change;Password=change;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ApplicationSettings": {
    /*
      ********* QUICK START *************
      If you want to get started quickly, then just change the following
      and then try to log in:
      
      ConnectionString
      AbsoluteUrlPrefix
      
      After you can log in and create a bug, then you probably want to
      set up the email integration. Set up the following:
      
      ErrorEmailTo
      ErrorEmailFrom

      NotificationEmailEnabled
      NotificationEmailFrom

      And your SMTP settings below.
    */
    "ConnectionString": "Server=.\\SQLEXPRESS;Database=btnet;User Id=change;Password=change;",
    /*
      Used when creating absolute href's. For example, in notification emails.
      Don't forget trailing slash!.
    */
    "AbsoluteUrlPrefix": "http://127.0.0.1/btnet/",
    /*
      You can turn the logging and emailing of errors on and off.
      Log file name is "btnet_log_yyyy_mm_dd.txt"

      For the LogFileFolder setting, if you specify the folder starting with a 
      drive letter or the \\ that indicates a UNC path, it's treated as a full path.
      For example: c:\\something or \\somemachine\something

      Otherwise it's treated as a path relative to where you virtual directory is located.

      LogEnabled turns on and off logging as a whole.
      LogSqlEnabled turns on and off just the logging of SQL statements, but
      that's about 98% of what gets logged, so if you want to reduce the
      volume, turn that off.
    */
    "LogEnabled": true,
    "LogSqlEnabled": true,
    "LogFileFolder": "App_Data\\logs",
    /*
      If BugTracker.NET itself experiences an error, it can send an email notification
    */
    "ErrorEmailEnabled": true,
    "ErrorEmailTo": "admin@example.com",
    "ErrorEmailFrom": "errors@example.com",
    /*
      You can "subscribe" to email notifications on a per-bug basis.
      You will receive an email whenever the bug is updated.
     */
    "NotificationEmailEnabled": true,
    /*
      Just demo'ing here how to make the email address friendlier:
      "NotificationEmailFrom": "&quot;Customer Support&quot;&lt;support@example.com&gt"/> 
    */
    "NotificationEmailFrom": "dont_reply@example.com",
    /*
      This controls the format of the subject of the email notifications.
      The available variables are:
      $THING$ - from the "SingularBugLabel" setting
      $BUGID$
      $ACTION$ - added or changed
      $SHORTDESC$
      $PROJECT$
      $CATEGORY$
      $ORGANIZATION$
      $PRIORITY$
      $STATUS$
      $TRACKINGID$ - from the "TrackingIdString" setting
      $ASSIGNED_TO$
    */
    "NotificationSubjectFormat": "$THING$:$BUGID$ was $ACTION$ - $SHORTDESC$ $TRACKINGID$",
    /*
      Ignore this setting unless you are experiencing violations of Medium Trust when sending email
      on a shared host due to ConfigurationManager permission. Use this to specify whether to send
      emails via SSL or not.
    */
    //"SmtpForceSsl": true,
    /*
      Ignore this setting unless you are esperiencing the symptoms
      related to this: http://cr.yp.to/docs/smtplf.html
    */
    //"SmtpForceReplaceOfBareLineFeeds": true,
    /*
      Dates fetched by the datepicker popup are formatted
      using the following specifiers.

      Set the second to your local date format without time
         The format can be combinations of the following:
         d  - day of month (no leading zero)
         dd - day of month (two digit)
         D  - day name short
         DD - day name long
         m  - month of year (no leading zero)
         mm - month of year (two digit)
         M  - month name short
         MM - month name long
         y  - year (two digit)
         yy - year (four digit)
    */
    "DatepickerDateFormat": "yy-mm-dd",
    /*
      These settings control how dates are displayed in the
      web pages.  It's not a perfect scheme, but the logic
      tries to display both the date and the time when that
      seems to be the right thing, and just the date, without
      the time, when that seems to be the right thing.

      See "Custom Date and Time Format Strings" for the .NET
      System.DateTime for the format specifiers you can use:
      http://msdn.microsoft.com/en-us/library/8kb3ddd4.aspx

      American style
    */
    "DateTimeFormat": "yyyy-MM-dd h:mm tt",
    /*
      European style
    */
    //"DateTimeFormat": "dd.MM.yy HH:mm",
    "JustDateFormat": "yyyy-MM-dd",
    /*
      This is used to convert the datetime into the format
      expected by SQL Server.

      Format SQL Server expects the dates to be in
      This doesn't affect what user sees on web pages.
    */
    //"SQLServerDateFormat": "yyyyMMdd HH\\:mm\\:ss",
    /*
      If category/project/status/priority are not enough bug attributes
      for you, here's one more that you can name yourself.

      This is just one of the ways, a simple way, of creating
      custom fields.  For more info, visit
      http://www.ifdefined.com/README.html
    */
    "ShowUserDefinedBugAttribute": false,
    "UserDefinedBugAttributeName": "YourAttribute",

    /*
      This controls whether entries are inserted into the bug_history table
      when the user changes description, category, priority, assigned to. or status.
    */
    "TrackBugHistory": true,
    /*
      When per-project permission is not specified, what is the permission?
      3 = "reporter" allow adds but after bug is added, only allow posting of additional comments
      2 = allow everything
      1 = allow view only
      0 = hide
    */
    "DefaultPermissionLevel": 2,
    /*
      Set WindowsAuthentication to "Windows" if you want to use windows authentication instead of the logon page.

      1) Configure your IIS virtual directory so that anon access is unchecked and windows authentication is checked
      2) Configure IE to automatically send username and password
      3) Usernames in users table should match your windows usernames. Passwords in users table will be ignored.

      If you want BOTH modes to work, set "WindowsAuthentication" to "Both".

      Configure your IIS virtual directory as normal (allowing anon access). Follow these instructions for the file "Account/LoginNt":

      * From IIS Manager, right-click the file Account/LoginNt and select properties
      * Select the Security tab
      * Click Edit in the Anonymous Access and Authentication frame
      * Ensure Anonymous Access and Basic Authentication is cleared
      * Ensure Integrated Windows Authentication is selected
      * Click OK
      * Select the Custom Errors tab
      * Select HTTP Error 401;2 and click Edit Properties
      * Set the message type to File and select the file login.htm, including the full local path. (Note that this must be a file reference and not a URL)

      The idea is that when the user access Account/Login, it redirects to Account/LoginNt.
      When access to Account/LoginNt is denied, IIS responds with the custom error login.htm.
      Login.htm then redirects to Account/Login.
    */
    "WindowsAuthentication": "Site",
    /*
      You can have BugTracker.NET check the user's password using an LDAP server instead of
      checking it in the database.  You still have to create a BugTracker.NET user. It's only
      the password that get's checked.
      
      To use LDAP, set AuthenticateUsingLdap to true and enter the appropriate distinguished name.
      The $REPLACE_WITH_USERNAME$ gets replaced with the username that's typed in by the user
      when he tries to log on.

        The LDAP auth type used when checking users' passwords using LDAP.
        Choices are:
          Anonymous
          Basic
          Negotiate
          Ntlm
          Digest
          Sicily
          Dpa
          Msn
          External
          Kerberos

        For details, see:
        http://msdn.microsoft.com/en-us/library/system.directoryservices.protocols.authtype.aspx
    */
    "AuthenticateUsingLdap": false,
    /*
      These values worked for me when I tested with OpenLDAP
    */
    //"LdapServer": "127.0.0.1",
    //"LdapUserDistinguishedName": "uid=$REPLACE_WITH_USERNAME$,ou=people,dc=mycompany,dc=com",
    //"LdapAuthType": "Basic",
    /*
      There's a special user in the database, "guest". Think of it as a user account that can
      be shared by several people. The guest user can't save settings and can't save searches.
      If "AllowGuestWithoutLogin" is set to "false", and if you set the guest user to active,
      then the guest user still has to login with a password. If set to "true", then the guest 
      user doesn't need to even enter a password. Instead, a link will appear on the login page, 
      Account/Login, saying:

      Continue as "guest" without logging in

      You can control the per-project permissions of the guest user in the same way as other
      users EXCEPT that even if you give the guest user permissions beyond View Only and Reporter,
      the system will automatically reduce his permissions downward.
    */
    "AllowGuestWithoutLogin": false,
    /*
      If you have windows security turned on, and if you set 
      EnableWindowsUserAutoRegistration to "true", then windows users will be
      automatically added to the BugTracker.NET database as users.
      
      The new user will be a clone of the user specified in
      WindowsUserAutoRegistrationUserTemplate
    */
    "EnableWindowsUserAutoRegistration": false,
    /*
      When creating a new user as a result of a auto-registration
      use an existing user's settings, permissions, etc as a template
      for the new user
    */
    "WindowsUserAutoRegistrationUserTemplate": "guest",
    "EnableWindowsUserAutoRegistrationLdapSearch": false,
    /*
     Configure how you want BugTracker.NET to search LDAP for a new user's info.
      In the examples below, BugTracker.NET logic will replace the "$REPLACE_WITH_USERNAME$" part
      with the user who is visiting the BugTracker.NET website for the first time.
      
      Replace "mycompany" with your company's domain.
      Replace "ExampleUsername" with the username IIS needs to use to connect to your AD or LDAP.  And replace the password, of course.
      The tricy parts are "LdapDirectoryEntryAuthenticationType" and the parts that vary if your schema varies.

      Authentication types are as follows:
        None
        Secure
        Encryption
        SecureSocketsLayer
        ReadonlyServer
        Anonymous
        FastBind
        Signing
        Sealing
        Delegation
        ServerBind
      For details, see:
      http://msdn.microsoft.com/en-us/library/system.directoryservices.authenticationtypes.aspx

      These values worked for me when I tested with OpenLDAP
    */
    //"LdapDirectoryEntryPath": "LDAP://127.0.0.1/DC=mycompany,DC=com",
    //"LdapDirectoryEntryAuthenticationType": "Anonymous",
    //"LdapDirectoryEntryUsername": "",
    //"LdapDirectoryEntryPassword": "",
    //"LdapDirectorySearcherFilter": "(uid=$REPLACE_WITH_USERNAME$)",
    //"LdapFirstName": "gn",
    //"LdapLastName": "sn",
    //"LdapEmail": "mail",
    //"LdapEmailSignature": "cn",
    /*
      These values worked for me when I tested with Microsoft "ADAM" on another machine
    */
    //"LdapDirectoryEntryPath": "LDAP://192.168.1.113:389/DC=mycompany,DC=com",
    //"LdapDirectoryEntryAuthenticationType": "None",
    //"LdapDirectoryEntryUsername": "cn=ExampleUsername,ou=people,dc=mycompany,dc=com",
    //"LdapDirectoryEntryPassword": "PASSWORD GOES HERE",
    //"LdapDirectorySearcherFilter": "(uid=$REPLACE_WITH_USERNAME$)",
    //"LdapFirstName": "givenName",
    //"LdapLastName": "sn",
    //"LdapEmail": "mail",
    //"LdapEmailSignature": "cn",
    /*
      "bhawkins" reported in the forum that these settings worked for his place.
    */
    //"LdapDirectoryEntryPath": "LDAP://DC=mycompany,DC=com",
    //"LdapDirectoryEntryAuthenticationType": "Secure",
    //"LdapDirectoryEntryUsername": "CN=ExampleUsername,OU=Service account,OU=Admin Service,DC=mycompany,DC=com",
    //"LdapDirectoryEntryPassword": "PASSWORD GOES HERE",
    //"LdapDirectorySearcherFilter": "sAMAccountName=$REPLACE_WITH_USERNAME$",
    //"LdapFirstName": "givenname",
    //"LdapLastName": "sn",
    //"LdapEmail": "mail",
    //"LdapEmailSignature": "cn"
    /*
      "th" reported that this worked
    */
    //"LdapDirectoryEntryPath": "LDAP://servername/DC=mycompany,DC=local",
    //"LdapDirectoryEntryAuthenticationType": "ReadonlyServer",
    //"LdapDirectoryEntryUsername": "CN=ExampleUsername,CN=users,DC=mycompany,DC=local",
    //"LdapDirectoryEntryPassword": "PASSWORD GOES HERE",
    //"LdapDirectorySearcherFilter": "sAMAccountName=$REPLACE_WITH_USERNAME$",
    //"LdapFirstName": "givenname",
    //"LdapLastName": "sn",
    //"LdapEmail": "mail",
    //"LdapEmailSignature": "cn"
    /*
      TextArea for Custom fields
      This setting is used to format custom defined fields.  If a field is greater than TextAreaThreshold, it will be
      displayed as a TextArea instead of a normal Input control. The number of rows in the TextArea is
      determined by dividing the field length by TextAreaThreshold up to a maximum value indicated by MaxTextAreaRows.
    */
    "TextAreaThreshold": 80,
    "MaxTextAreaRows": 3,
    /*
      Some folks don't like the word "bug".
      These next four settings allow you to override the text of the logo and the word bugs.
    */
    "ApplicationTitle": "BugTracker.NET",
    "SingularBugLabel": "bug",
    "PluralBugLabel": "bugs",
    /*
      customize marker for creating hyperlinks in bug comments
    */
    "BugLinkMarker": "bugid#",
    /*
      In dropdowns featuring users, do you want to see the logon names or their full names, in
      "LastName, FirstName" format?

      If you set this to "true", for the user-related filter dropdowns to work, you will also 
      have to adjust your SQL that you use for the bug lists. Your SQL will need to end
      up with parts of it looking something like this. The names of the columns must
      be "reported by" and "assigned to" because the logic that creates the filter dropdowns
      looks for those names.

      ~
      ~
      rpt.us_lastname + ', ' + rpt.us_firstname [reported by],
      asg.us_lastname + ', ' + asg.us_firstname [assigned to],
      ~
      ~
      left outer join users rpt
      left outer join users asg
    */
    "UseFullNames": false,
    /*
      In Bug/Create or Bug/Update, you can have your own link appear:
      <a href="LINK URL?bugid=...">YOUR LINK</a>

      You have to HTML encode any HTML tags embedded here.
    */
    //"CustomBugLinkLabel": "YOUR LINK",
    //"CustomBugLinkUrl": "LINK URL",
    /*
      You can add to the menu, just to the left of the "go to ID" button.
      You have to HTML encode any HTML tags embedded here.
    */
    //"CustomMenuLinkLabel": "YOUR LINK",
    //"CustomMenuLinkUrl": "LINK URL",
    /*
      You can add a link to a bug post (comment, attachment, email, etc)
      Your link will looks something like this:
      <a href="LINK URL?postid=99999">YOUR LINK</a>

      You have to HTML encode any HTML tags embedded here.

      Jochen Jonckheere has contributed a fun sample that uses
      a web service to translate the text of a bug comment.
    */
    //"CustomPostLinkLabel": "YOUR LINK",
    //"CustomPostLinkUrl": "LINK URL",
    "TrackingIdString": "DO NOT EDIT THIS:",
    /*
      If you want replies to be generated automatically.
    */
    "AutoReplyText": "Thanks for you email.&#xD;&#xA;Don't call us, we'll call you.",
    "AutoReplyUseHtmlEmailFormat": false,
    /*
      SearchSQL allows you to customize the columns, etc that are displayed on the "search"
      page, /Search.

      The "[br]" characters are replaced by line breaks. They are there to make the SQL
      display nicely, but the SQL will work without them too.

      The "$WHERE$" marks the spot in the SQL where the logic will modify the where
      clause based on what the user entered in the search form.
    */
    //"SearchSQL": "",
    /*
      Search has a "Suggest" feature like Google Labs "Suggest"
      at http://www.google.com/webhp?complete=1&hl=en.

      Suggest starts working after you type in 3 characters in the "description contains"
      field. But you can change the number of characters required here.
    */
    "SearchSuggestMinChars": 3,
    /*
      If you want emails handled by BugTracker.MailService.exe to automatically reset a bugs 
      status, set this to the st_id, the integer, of the status you want.

      Set it to 0 to turn	this feature off.
    */
    "StatusResultingFromIncomingEmail": 0,
    /*
      If you set this to true, you will see an additional "Visible to internal users only"
      checkbox in pages to edit bugs, attachments, and comments.  If you check it, then
      that attachement or comment will not be visible to users who are marked "external".
      
      They ARE visible in prints for internal users, and they are visible when an
      internal users checks "Include print of Bug" when sending email.
      
      If you want the entire bug to be private, create another project and don't give
      the external users permissions for that project, and then assign the bug to that other
      project.
    */
    "EnableInternalOnlyPosts": false,
    /*
      Turning this on make a "revisions" link visible on the edit bug page.
      Svn_hook_for_btnet.rename_to_py is the hook script for integrating svn
      and BugTracker.NET. Edit the settings here, install the hook script,
      and edit the values in the hook script.  There are more instructions in
      the hook script file.
    */
    "EnableSubversionIntegration": false,
    "SubversionPathToSvn": "C:\\apps\\svn-win32-1.6.17\\bin\\svn.exe",
    "SvnHookUsername": "admin",
    /*
      You can specify some additional arguments that will get appened to every svn command.
    
      I found that on Windows 7 I needed to copy the C:\Users\corey\AppData\Roaming\Subversion 
      folder so that it was not under C:\Users. 
    */
    "svn://127.0.0.1/mysvn_repo": "corey|password",
    "SubversionAdditionalArgs": "--config-dir c:\\cit\\mysvn_config",
    /*
      First, look for bugid at end of checkin message, the way ToroiseSVN does it
    */
    "SvnBugidRegexPattern1": "([0-9,]+$)",
    /*
      If not there, look to see if message starts with an integer
    */
    "SvnBugidRegexPattern2": "(^[0-9,]+ )",
    /*
      Turning this on make a "commits" link visible on the edit bug page.
      Git_hook_for_btnet.rename_to_py is the hook script for integrating git 
      and BugTracker.NET.  Edit the settings here, install the hook script, 
      and edit the values in the hook script.  There are more instructions in the
      hook script file.

      This is a hack. My logic in the svn pages doesn't handle files that have
      been renamed, like, if you want to diff revision 2 "new_name.txt" 
      with revision 1 "old_name.txt". Set this to "1" in and the logic will 
      trust paths in the urls. It makes a little hole in the permissions, but
      you probably don't care, because somebody could theoretically look at a 
      file that's unrelated to a bug they have permission for.
    */
    "SvnTrustPathsInUrls": true,
    "EnableGitIntegration": false,
    /*
      git.exe, the git client, needs to be on the web server
    */
    "GitPathToGit": "C:\\Program Files (x86)\\Git\\bin\\git.exe",
    /*
      The username that the git hook sends to the web server has to
      match this user. Versioning/Git/Hook checks that the request is
      coming from this username.
    */
    "GitHookUsername": "admin",
    "GitBugidRegexPattern": "(^[0-9]+)",
    /*
      Mercurial integration.
      Works just like the git integration, so see comments above for git.
    */
    "EnableMercurialIntegration": false,
    "MercurialPathToHg": "c:\\Program Files (x86)\\Mercurial\\hg.exe",
    "MercurialHookUsername": "admin",
    "MercurialBugidRegexPattern": "(^[0-9]+)",
    /*
      These entries control where attachment file are uploaded to and how large
      the files can be.
      
      If StoreAttachmentsInDatabase is set to "1", all new attachments
      will be stored in the SQL database. If StoreAttachmentsInDatabase
      is set to "0", all new attachments will be stored in the
      folder indentified by the UploadFolder setting (if uncommented).
      
      For the UploadFolder setting, if you specify the folder starting with a 
      drive letter or the \\ that indicates a UNC path, it's treated as a full path.  
      For example: c:\\something or \\somemachine\something

      Otherwise it's treated as a path relative to where you virtual directory is
      located.

      Database storage of attachments is backward compatible with
      the prior version of BugTracker.NET. If the attachment cannot
      be found in the database, BugTracker.NET will check the
      UploadFolder. Therefore, you may enable StoreAttachmentInDatabase
      even if you have previously used UploadFolder.

      Turning this on make a "commits" link visible on the add/edit bug page.
      See the "git" folder for hook scripts that will integrate git with
      BugTracker.NET.  For installation instructions, read the comments in
      the script.
    */
    "StoreAttachmentsInDatabase": true,
    "UploadFolder": "App_Data\\uploads",
    /*
      MaxUploadSize here is bytes. See also maxRequestLength above in KB, not bytes
    */
    "MaxUploadSize": 5000000,
    /*
      For now (version 3.6.7) just used to control how long to wait for inserting attachements in the db.
      Maybe in future versions it will be used for other queries.  30 seconds is the default.
    */
    "SqlCommandCommandTimeout": 30,
    /*
      If set to "1", then passwords need to be at least 8 characters long.
      The characters in the password need to be from at least 2 of the
      following categories:
      * lowercase letters
      * uppercase letters
      * numbers
      * special chars
    */
    "RequireStrongPasswords": false,
    /*
      Show "Forgot password?" link.
    */
    "ShowForgotPasswordLink": false,
    /*
      Allow people to self-register.
      You must also set "SelfRegisteredUserTemplate".
      You should also consider setting "RequireStrongPasswords"
    */
    "AllowSelfRegistration": false,
    /*
      When creating a new user as a result of a self-registration,
      use an existing user's settings, permissions, etc as a template
      for the new user
    */
    "SelfRegisteredUserTemplate": "guest",
    /*
      Number of minutes a new user has between the time they register
      and the time they must confirm the registration by clicking on
      the link they received by email
    */
    "RegistrationExpiration": 20,
    /*
      Some people have reported problems with the HTML TABLE borders 
      missing in email notifications.  Actually, the css settings 
      seem to get ignored entirely.  Setting this to "1"
      will force the table to have borders even without css.
    */
    "ForceBordersInEmails": false,
    /*
      If this is set to "1", then the list of user names in the dropdowns
      in the search page is limited to those users who have either reported bugs
      or have bugs currently assigned to them.  Setting this to "1" might
      make the search page load slower. Setting it to "0" might result in
      too many names in the dropdowns on the search page.
    */
    "LimitUsernameDropdownsInSearch": false,
    /*
      Enabling tags lets you mark bugs with your own free-form keywords and 
      then filter bug lists using your keywords.  
      
      Note that you might not want to use this feature if you are also using
      tricky permissions, because the page that displays already-used tags
      and their counts looks at all bugs, not just the bugs that the user
      is elegible to see.   That is, if somebody with rights only to project A
      tags 3 bugs with "Foo", then somebody with rights only to project B
      will see "Foo(3)" in the /Bug/Tag page. Maybe that matters to you, 
      maybe not.
    */
    "EnableTags": false,
    /*
      I'm not 100% sure that FCKEditor, or the way I'm using FCKEditor, 
      is secure. It might be possible to use it for Cross-Site-Scripting.
      If you don't trust it, or me, set this to true.
    */
    "DisableFCKEditor": false,
    /*
      If your Attachment/Show isn't working when you are trying to download
      a large file, then try setting this to true.  
      But you might have problems on  Windows Server 2000:
      http://support.microsoft.com/?kbid=902780
    */
    "UseTransmitFileInsteadOfWriteFile": false,
    /*
      BugTracker.NET can remember which bugs you have seen or not.  To
      enable this feature, set this to 1.  You also have to include
      the $SEEN magic word in your query as explained in Query/Update
    */
    "EnableSeen": false,
    /*
       People can vote for their favorte bug. To enable this feature, set 
      this to true.  You also have to include the $VOTE magic word in your 
      query as explained in Query/Update
    */
    "EnableVotes": true,
    /*
      Enabling this adds a "news" link to the menu that goes across the page.
      Click on the "news" page, leave it up, and it will refresh itself as people 
      add and change bugs. 
      
      IMPORTANT:
      It doesn't obey any permissions, so you probably don't want to use this
      page if you also use project or organization permissions.
    */
    "EnableWhatsNewPage": false,
    "WhatsNewPageIntervalInSeconds": 20,
    "WhatsNewMaxItemsCount": 200,
    /*
      Something I use for debugging, in conjunction with the ViewMemoryLog.aspx.
      Only useful for a programmer.  If you are interested, search the code
      for MemoryLogEnabled.
    */
    //"MemoryLogEnabled": true,
    /*
      Use this to turn on/off the full text search in the upper right corner.
      I think, the only reason to turn it off is if you have some technical problem 
      with it.
    */
    "EnableLucene": true,
    "LuceneIndexFolder": "App_Data\\lucene_index",
    /*
      Adds a button to the top of the form too.
    */
    "DisplayAnotherButtonInEditBugPage": false,
    /*
      Adds the "tasks/time" link to edit_bug page, which you can use for entering
      sub-tasks, entering time-tracking info, entering scheduling info. It's
      flexible. See the "ShowTask" settings below also.
    */
    "EnableTasks": false,
    /*
      These control the default selections in the task dropdowns
    */
    "TaskDefaultDurationUnits": "hours",
    "TaskDefaultHour": "09",
    "TaskDefaultStatus": "[no status]",
    /*
      Use these settings to show LESS in the tasks/time pages.

      So, for example, if you are using tasks just for time tracking,
      you might only want to show the "Actual Duration" column and
      hide the others.

      Or,if you are using tasks as sub-tasks, you might only want to
      show the "Status" and "Assigned To" columns and hide the 
      others.

      Or, if you are using tasks for estimation, you might only want
      to show the "Planned Duration" and "Percent Complete" columns.
    */
    //"ShowTaskAssignedTo": false,
    //"ShowTaskPlannedStartDate": false,
    //"ShowTaskActualStartDate": false,
    //"ShowTaskPlannedEndDate": false,
    //"ShowTaskActualEndDate": false,
    //"ShowTaskPlannedDuration": false,
    //"ShowTaskActualDuration": false,
    //"ShowTaskDurationUnits": false,
    //"ShowTaskPercentComplete": false,
    //"ShowTaskStatus": false,
    //"ShowTaskSortSequence": false,
    /*
      Enables the "relationships" link on the edit bug page.
    */
    "EnableRelationships": false,
    /*
      Different versions of ASP.NET give the form different names.  If you are
      having problems paging or sorting the bug list, if you are getting 
      javascript errors, then do a view source to see	what the form name is, 
      and then put that here.
    */
    //"AspNetFormId": "ctl00",
    /*
      If you want to create users automatically from incoming emails, then 
      set this value to the same BugTracker.NET username as BugTracker.MailService.exe.
      So, for example, if BugTracker.MailService.exe logs on as "email", then set this
      to "email".

      BugTracker.NET will create new users by copying the username specified
      in the "CreateUsersFromEmailTemplate" setting.

      The new users username will be the "from" email address.
    */
    "CreateUserFromEmailAddressIfThisUsername": "BugTracker.MailService.exe username goes here",
    /*
      The new users created via email will be clones of the user specified here.
    */
    "CreateUsersFromEmailTemplate": "customer1",
    /*
      If you are using the settings above, CreateUserFromEmailAddressIfThisUsername
      and CreateUsersFromEmailTemplate, then you can also allow incoming emails 
      to create new organizations.
      
      The user will still be created with the user template EXCEPT that instead
      of the template user's org, the system will create a new org using the 
      incoming email address's domain name.  So, if jsmith@example,com sends
      an email, the system will create an org, "example.com" based on the template
      user's org a user, "jsmith@example.com", based on the template user.
    */
    "UseEmailDomainAsNewOrgNameWhenCreatingNewUser": false,
    /*
      For throttling brute force attempts, only allow N failed attempts in the most recent N minutes
      for a given username.
    */
    //"FailedLoginAttemptsMinutes": 10,
    //"FailedLoginAttemptsAllowed": 10,
    /*
      Controls whether bug posts are displayed with the most recent listed first, "desc"
      or the least recent listed first, "asc"
    */
    //"CommentSortOrder": "desc",
    /*
      The times in the database are in the server's time zone.
      If all your users are in another time zone and you'd like to display the times
      in that, use this offset.
    */
    //"DisplayTimeOffsetInHours": 0,
    /*
      Work around a problem that some users are having when email addresses are in the format:
        Corey Trager <ctrager@yahoo.com>
      instead of
        ctrager@yahoo.com
    */
    //"StripDisplayNameFromEmailAddress": true,
    /*
      This SQL is executed in Bug/Insert after a bug has been inserted.
      You could use it, for example, to update custom fields, or to implement a more 
      complicated way of assigning the bug to the riht person.

      $BUGID$ gets replaced by the newly inserted bug's id.

      This gets executed as a batch of sql, so there can be more than one
      update statement.

      If you use < or > in this SQL, code it as &lt; &gt;

      Sample custom post insert sql for Bug/Insert 
      The sample demos setting the priority based on which user reported the bug.
      Value:
      declare @username varchar(100)

      select @username = us_username from bugs inner join users on bg_reported_user = us_id
        where bg_id = $BUGID$ 

      update bugs set 
      bg_priority = 
      case 
        when @username like '%admin%' then 3
        when @username like '%tester%' then 2
        else 1
        end
      where bg_id = $BUGID$
      
    */
    //"UpdateBugAfterInsertBugAspxSql": "",
    /*
      HTML attachments to bugs or emails could contain malicious javascript.
      BugTracker.NET before version 3.5.3 made it too easy to view these 
      attachments. If you want the older, more dangerous behavior, set the
      value here to "true".
    */
    "ShowPotentiallyDangerousHtml": false,
    /*
      Some folks my want to change this to a semi-colon, for example
    */
    //"EmailAddressSeparatorCharacter": ",",
    "StripHtmlTagsFromSearchableText": true,
    "NoCapitalization": false,
    "WriteUtf8Preamble": true,
    "BodyEncodingUtf8": true,
    "EnableEditWebConfigPage": false
  }
}
