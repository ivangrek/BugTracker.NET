@using System.Data
@using BugTracker.Web.Core

@{
    var fieldId = (string)ViewData["FieldId"];
    var columnName = (string)ViewData["ColumnName"];
    var dropdownType = (string)ViewData["DropdownType"];
    var dropdownValues = (string)ViewData["DropdownValues"];
    var dataType = (string)ViewData["DataType"];
    var fieldLength = (int)ViewData["FieldLength"];
    var selectedValue = (string)ViewData["SelectedValue"];
    var dataTableUsers = (DataTable)ViewData["DataTableUsers"];
    var applicationSettings = (IApplicationSettings)ViewBag.ApplicationSettings;

    var minTextAreaSize = applicationSettings.TextAreaThreshold;
    var maxTextAreaRows = applicationSettings.MaxTextAreaRows;
}

@if (dropdownType == "normal")
{
    var options = Util.SplitDropdownVals(dropdownValues);
    var decodedSelectedValue = HttpUtility.HtmlDecode(selectedValue);
    var list = new List<SelectListItem>();

    foreach (var option in options)
    {
        var decodedOption = WebUtility.HtmlDecode(option);

        list.Add(new SelectListItem
        {
            Value = decodedOption,
            Text = decodedOption,
            Selected = decodedOption == decodedSelectedValue
        });
    }

    @Html.DropDownList(fieldId, list, new { id = columnName, @class = "form-control" })
}
@*else if (dropdownType == "users")
{
    var dataViewUsers = new DataView(dataTableUsers);
    var list = new List<SelectListItem>();

    foreach (DataRowView row in dataViewUsers)
    {
        var userId = Convert.ToString(row[0]);
        var userName = Convert.ToString(row[1]);

        list.Add(new SelectListItem
        {
            Value = userId,
            Text = userName,
            Selected = userId == selectedValue
        });
    }

    @Html.DropDownList(fieldId, list, new { id = columnName, @class = "form-control" })
}*@
else if (dataType == "datetime")
{
    <div class="input-group">
        @Html.TextBox(fieldId, selectedValue, new { id = columnName, @class = "form-control date", onkeydown = "mark_dirty()", onkeyup = "mark_dirty()" })

        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" onclick="show_calendar('@columnName')">[select]</button>
        </div>
    </div>
}
else if (fieldLength > minTextAreaSize)
{
    @Html.TextArea(fieldId, WebUtility.HtmlEncode(selectedValue), new
    {
        id = columnName,
        @class = "form-control resizable",
        onkeydown = $"count_chars('{columnName}', {fieldLength})",
        onkeyup = $"count_chars('{columnName}', {fieldLength})",
        cols = minTextAreaSize,
        rows = fieldLength / minTextAreaSize > maxTextAreaRows
            ? maxTextAreaRows
            : fieldLength / minTextAreaSize
    })

    <small id="@(columnName)_cnt" class="form-text text-muted"></small>
}
else
{
    @Html.TextBox(fieldId, selectedValue, new { id = columnName, @class = "form-control", onkeydown = "mark_dirty()", onkeyup = "mark_dirty()" })
}
