@model BugTracker.Web.Models.Report.EditModel
@inject ICustomizer Customizer

@section Styles {
}

@section Scripts {
    <script src="~/lib/edit_area/edit_area_full.js"></script>

    <script>
        editAreaLoader.init({
            id: "sqlText", // id of the textarea to transform
            start_highlight: true, // if start with highlight
            toolbar: "search, go_to_line, undo, redo, help",
            browsers: "all",
            language: "en",
            syntax: "sql",
            allow_toggle: false,
            min_height: 300,
            min_width: 400
        });
    </script>
}

@section BodyHeader {
    @await Html.PartialAsync("_MainMenu")
}

@section BodySubHeader {
}

<div class="row">
    <div class="col-lg-6">
        <div class="card bg-light mb-3">
            <div class="card-body">
                @using (Html.BeginForm(Model.Id == 0 ? "Create" : "Update", "Report", FormMethod.Post, new { @class = "frm" }))
                {
                    @await Html.PartialAsync("_ValidationSummary")

                    @Html.HiddenFor(x => x.Id)

                    <div class="form-group">
                        @Html.LabelFor(x => x.Name):
                        @Html.TextBoxFor(x => x.Name, new { @class = "form-control", maxlength = "80", size = "80" })
                        @Html.ValidationMessageFor(x => x.Name, null, new { @class = "text-danger" }, "small")
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.ChartType):

                        <div>
                            <div class="form-check">
                                @{
                                    var id = Guid.NewGuid();
                                }

                                @Html.RadioButtonFor(x => x.ChartType, "Table", new { id = id, @class = "form-check-input" })
                                @Html.Label("Table", "Table", new { @for = id, @class = "form-check-label" })
                            </div>

                            <div class="form-check">
                                @{
                                    id = Guid.NewGuid();
                                }

                                @Html.RadioButtonFor(x => x.ChartType, "Pie", new { id = id, @class = "form-check-input" })
                                @Html.Label("Pie", "Pie", new { @for = id, @class = "form-check-label" })
                            </div>

                            <div class="form-check">
                                @{
                                    id = Guid.NewGuid();
                                }

                                @Html.RadioButtonFor(x => x.ChartType, "Bar", new { id = id, @class = "form-check-input" })
                                @Html.Label("Bar", "Bar", new { @for = id, @class = "form-check-label" })
                            </div>

                            <div class="form-check">
                                @{
                                    id = Guid.NewGuid();
                                }

                                @Html.RadioButtonFor(x => x.ChartType, "Line", new { id = id, @class = "form-check-input" })
                                @Html.Label("Line", "Line", new { @for = id, @class = "form-check-label" })
                            </div>
                        </div>

                        @Html.ValidationMessageFor(x => x.ChartType, null, new { @class = "text-danger" }, "small")
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(x => x.SqlText):
                        @Html.TextAreaFor(x => x.SqlText, new { id = "sqlText", @class = "form-control", rows = "10", cols = "70" })
                        @Html.ValidationMessageFor(x => x.SqlText, null, new { @class = "text-danger" }, "small")
                    </div>

                    <button type="submit" class="btn btn-success">@(Model.Id == 0 ? "Create" : "Update")</button>
                    <a href="@Url.Action("Index")" class="btn btn-link">Cancel</a>
                }
            </div>
        </div>

        <div class="alert alert-info">
            To use "Pie", "Bar", or "Line", your SQL statement should have two columns
            <br>
            where the first column is the label and the second column contains the value.
            <br>
            <br>
            You can use the pseudo-variable $ME in your report which will be replaced by your user ID.
            <br>
            For example:
            <ul>
                select .... from ....
                <br>
                where bg_assigned_to_user = $ME
            </ul>
        </div>
    </div>
</div>

@section BodyFooter {
    @Html.Raw(Customizer.FooterHtml)
}
