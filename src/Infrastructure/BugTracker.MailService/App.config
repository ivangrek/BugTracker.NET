<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section
      name="btnetSettings"
      type="System.Configuration.NameValueFileSectionHandler" />
  </configSections>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
  </startup>

  <btnetSettings>
    <GlobalSettings>
      <add key="LogFileFolder" value="c:\temp"/>
      <add key="LogEnabled" value="1"/>

      <!--
        How frequently should btnet_console.exe or BugTracker.MailService.exe check the server for emails?
      -->
      <add key="FetchIntervalInMinutes" value="1"/>

      <!--
        How many errors should we allow before the fetch loop automatically 
        stops? This is a safeguard in case there is some sort of problem with 
        the web server where insert_bug.aspx does succeed in inserting the bug, 
        but somehow fails to give a good response to this service.

        If the service doesn't get a good response, it will not delete the email 
        from the pop3 server and will try to insert the email again when the 
        fetch interval triggers another loop.    The result can be a lot of 
        duplicate bugs generated from the one problem email.   This has
        happened to a couple people....
      -->
      <add key="TotalErrorsAllowed" value="100"/>

      <!--
        Are you Swedish?
        
        Turning this on changes how the service reads its input.  If you are 
        finding that special characters have been mysteriously stripped out
        of the incoming emails, set this to "1" and see if it helps.
      -->
      <add key="ReadInputStreamCharByChar" value="0"/>
    </GlobalSettings>

    <Website>
      <!--
        This is the setting that btnet_console.exe or BugTracker.MailService.exe uses to post the bugs.
      -->
      <add key="LoginUrl" value="https://localhost:44351/Account/Login"/>
      <!--
        This is the setting that btnet_console.exe or BugTracker.MailService.exe uses to post the bugs.
      -->
      <add key="InsertBugUrl" value="https://localhost:44351/api/BugFromEmail"/>

      <!--
        This should be the same as Web.config's setting ConnectionString.
      -->
      <add key="ConnectionString" value="Server=.\SQLEXPRESS;Database=btnet;User Id=change;Password=change;"/>

      <!--
        Sample POP3 settings
      -->

      <!--
        SBC
      -->

      <!--
      <add key="Pop3Server" value="pop.att.yahoo.com"/>
      <add key="Pop3Port" value="995"/>
      <add key="Pop3UseSSL" value="1"/>
      -->

      <!--
        GMail
      -->
      <add key="Pop3Server" value="127.0.0.1"/>
      <add key="Pop3Port" value="110"/>
      <add key="Pop3UseSSL" value="0"/>

      <!--
        BugTracker.NET username, password that btnet_server.exe will use
        to talk to BugTracker.NET. These are not the username/password
        for the pop3 server itself - those come from the project rec in
        the projects table.
      -->
      <add key="ServiceUsername" value="email"/>
      <add key="ServicePassword" value="change"/>

      <!--
        Only retrieve messages if their subject contains the magic string below.
        If the value is blank, then BugTracker.MailService.exe will retrieve all messages.
        Probably for your production, the value should be blank.
      -->
      <add key="SubjectMustContain" value=""/>

      <!--
        Skip message if the subject contains the magic string below.
        You can specify multiple strings by separating them with a 
        pipe character like this:
        "string one|string two|string three"
      -->
      <add key="SubjectCannotContain" value=""/>

      <!--
        Only retrieve messages if their "from" address contains the magic string below.
        If the value is blank, then BugTracker.MailService.exe will retrieve all messages.
        Probably for your production, the value should be blank.
      -->
      <add key="FromMustContain" value=""/>

      <!--
        Skip message if the "from" address contains the magic string below.
        You can specify multiple strings by separating them with a 
        pipe character like this:
        "string one|string two|string three"
      -->
      <add key="FromCannotContain" value=""/>

      <!--
        For my own testing, it was useful to have this option.
        For production the value should be 1.
      -->
      <add key="DeleteMessagesOnServer" value="0"/>

      <!--
        For diagnosing problems, dump the message text to a file
      -->

      <!--
      <add key="MessageOutputFile" value="c:\temp\btnet_test_messages_out.txt"/>
      -->

      <!-- 
        For testing, read the message text from a file rather than from
        a POP3Server.

        Seperate multiple messages in the file with a line like this:
        Q6Q6

        Maximum of 100 test messages.
      -->
      <!--
      <add key="MessageInputFile" value="c:\temp\btnet_test_messages_in.txt"/>
      -->
      <!--
        Customize the text that appears in the subject of emails that allows
        us to related incoming emails to the bugids they refer to.   We parse
        these words in the subject to get the bugid.
        This MUST be the same as Web.config's setting "TrackingIdString".
      -->
      <!--
      <add key="TrackingIdString" value="DO NOT EDIT THIS:">
      -->

      <!--
        If the email fetching thread seems to be stuck for a couple hours, 
        kill it and spawn another.  This is a workaround because of the
        blocking socket reads in the code.
      -->
      <add key="EnableWatchdogThread" value="1"/>
      <add key="RespawnFetchingThreadAfterNSecondsOfInactivity" value="7200"/>
    </Website>
  </btnetSettings>
</configuration>
